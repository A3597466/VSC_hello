# 以下是一个使用莱布尼茨级数来计算圆周率的示例代码：

# 这个代码使用莱布尼茨级数来逐步计算圆周率的近似值。莱布尼茨级数公式表达了圆周率π的近似值，通过交替相加的方式逼近。在每一项中，分子是1，分母是奇数的连续整数（1，3，5，7，...）。通过不断累加这些项，并根据每一项的正负号进行加减操作，可以得到一个逼近圆周率的结果。

# 你可以根据需要调整digits的值来控制所需的圆周率的位数。请注意，此方法虽然可以计算更多位数的圆周率，但随着位数的增加，计算时间也会变长。希望这个代码对你有帮助！如果有任何问题，请随时提问。

def calculate_pi(digits):
    pi = 0
    sign = 1

    for i in range(0, digits):
        term = 1 / (2*i + 1)
        pi += sign * term
        sign *= -1

    pi *= 4
    return pi

digits = 10000
pi = calculate_pi(digits)
print("圆周率的近似值：", pi)


